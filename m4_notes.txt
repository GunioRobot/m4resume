In general:  
 - M4 is functional, it always returns values
 - You really need to find the innermost point and work backards (like FP)
 - "Expanded" means "quotes stripped"
 - Each argument has unquoted leading whitespace removed
-------------------------------------------------------------------------------
* Something read by M4 is broken into the following categories:
 -> Name
 -> Quoted String
 -> Any single character

* Macro names are [\w\d_]
 + Names will be expanded, where they are defined.

* Quoted String
 + Strings are represented by `'
 + Their value is the contents, minus one level of quotation pairing
 + Can be changed with the changequote() macro
    Example:  
    changequote([,])dnl

* Comments
 + Preceeded by #
 + Ignored by the processor, but still put into the output stream

* Everything else is put into the output stream 

-------------------------------------------------------------------------------
# Break apart an example:

========================================
changequote([,])dnl
========================================

Parse 'changequote', it's a macro
 get (
 get [
 get ,
 get ]
 get )
 RETURNS: ''

Thus...
`'dnl

Thus....
NULL

-------------------------------------------------------------------------------

========================================
define([gl_STRING_MODULE_INDICATOR],
 [ 
   dnl comment
 GNULIB_]translit([$1],[a-z],[A-Z])[=1
 ])dnl
========================================


`define' is a macro
 Get:  quoted string gl_STRING_MODULE_INDICATOR
 Get:  ,
 Get:  quoted string [ dnl comment GNULIB_]
 Get:  translit ( in one level ) #equivalent to: => $1
   Get: (
   Get: QS: [$1]
   Get: QS: a-z
   Get: QS: A-Z
   Returns: $1
 Get:  QS: [=1\n]

Thus we gl_STRING_MODULE_INDICATOR takes an argument that has
GNULIB_ at the beginning and itself, capitalized, and =1\n done to it.

Now we have...gl_STRING_MODULE_INDICATOR([strcase]) that returns
  GNULIB_strcase=1

-Fin-
-------------------------------------------------------------------------------

Macro invocation

+ All arguments to a macro are passed as strings
+ Macros cannot be meaningfully passed without arguments, thus () negates the
  force of a macro call
+ To dumb+ify the namespace use the +P option (++prefix+namespace)
+ Or, quote it, thus the return value is returned, not the macro value
+ Macro values are ALWAYS rescanned
+ Unquoted strings on either side of a quoted string are subject to being
  recognized as macro names.
+ Macros are expanded normally during argument collection, and whatever commas,
  quotes and parentheses that might show up in the resulting expanded text will
  serve to define the arguments as well.
+ It is common practice to quote all arguments to macros

A GREAT QUOTATION RULE OF THUMB 

Each layer of parentheses introduces another layer of single quoting, except
when showing the consequences of quoting rules.  It has a nice property: when a
macro name appears inside parentheses, you can determine when it will be
expanded. 

 -> If it is not quoted, it will be expanded prior to the outer macro, so that
    its expansion becomes the argument. 
 -> If it is single-quoted, it will be expanded after the outer macro. 
 -> And if it is double-quoted, it will be used as literal text instead of a macro name. 

########################################
# ARRAYS
########################################

     define(`array', `defn(format(``array[%d]'', `$1'))')
     ⇒
     define(`array_set', `define(format(``array[%d]'', `$1'), `$2')')
     ⇒
     array_set(`4', `array element no. 4')
     ⇒
     array_set(`17', `array element no. 17')
     ⇒
     array(`4')
     ⇒array element no. 4
     array(eval(`10 + 7'))
     ⇒array element no. 17

Change %d -> %s for an associative array.  
-------------------------------------------------------------------------------
An Idea:  Recursion to implement reverse:

# With ifelse with args > 6, it's handy to break thinsg up into groups of 3,
# with the hanging leftover at the last

define(`reverse', `ifelse(`$#', `0', , 
                          `$#', `1', ``$1'',
                         `reverse(shift($@)), `$1'')')
-------------------------------------------------------------------------------

######################################################################
# HANDY MACROS
######################################################################
- index(`abc', `b') :  get position of character in string
- define (name, [expansion]) : define a macro
- defn : redefine a macro
- format
- argn
- shift (arg1, ...):  It's LISP cdr
- nargs() : number of args passed
- undefine (name...) : delete a macro
— Builtin: pushdef (name, [expansion]):  temporarly overlay a definition for a
macro
— Builtin: popdef (name...):  remove averlay
— indir (name, [args...]):  Results in a call to the macro name, which is passed the rest of the arguments args.
— Builtin: builtin (name, [args...]): call builtin macros indirectly

CONDITIONS
- Builtin: ifdef (name, string-1, [(else)string-2])
— Builtin: ifelse (comment)
— Builtin: ifelse (string-1, string-2, equal, [not-equal])
— Builtin: ifelse (string-1, string-2, equal-1, string-3, string-4, equal-2, ..., [not-equal])


-------------------------------------------------------------------------------
DIVERT

If output is diverted to a negative diversion, it is simply discarded. This can
be used to suppress unwanted output. A common example of unwanted output is the
trailing newlines after macro definitions. Here is a common programming idiom in
m4 for avoiding them.

     divert(`-1')
     define(`foo', `Macro `foo'.')
     define(`bar', `Macro `bar'.')
     divert


WHEN DIVERTED TEXT IS UNDIVERTED, IT IS NOT REREAD BY M4


######################################################################
# HANDY VARIABLES
######################################################################
- $# : Integer count number of arguments
- $* : Argument list, de-quoted, comma-separated
- $@  : Is $*, but with each element quoted

BLIND MACRO:  Macro expanded only with arguments
